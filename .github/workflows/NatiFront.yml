name: Create Release and Deploy

on:
  schedule:
    - cron: '27 7 * * *'  # 매일 7시 25분 (UTC) 실행 (한국 시간 16시 25분)
  push:
    branches:
      - dev  # dev 브랜치에서만 실행

jobs:
  release:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Install jq
        run: sudo apt-get install jq

      - name: Get the version from package.json
        id: get_version
        run: |
          VERSION=$(cat package.json | jq -r .version)
          NOTES=$(cat package.json | jq -r .releaseNotes)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "NOTES=$NOTES" >> $GITHUB_ENV

      - name: Debugging environment variables
        run: |
          echo "Version: $VERSION"
          echo "Release Notes: $NOTES"

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: "Release ${{ env.VERSION }}"
          body: ${{ env.NOTES }}

      - name: Set up Docker Compose
        uses: docker/setup-buildx-action@v2  # Docker Buildx 설정
        with:
          version: latest  # 최신 버전의 Docker Buildx 사용

      # Docker Compose 설치
      - name: Install Docker Compose
        run: |
          curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version  # 설치 확인

      - name: Build and push Docker image
        run: |
          docker-compose -f docker-compose.yml build  # Docker 이미지를 빌드
          docker-compose -f docker-compose.yml up -d  # Docker Compose로 서비스 시작

      - name: Create and push Releases branch if it does not exist
        run: |
          git fetch origin
          if ! git rev-parse --verify origin/Releases; then
            echo "Releases branch does not exist. Creating it..."
            git checkout -b Releases
            git push origin Releases
          else
            echo "Releases branch already exists."
          fi

      - name: Merge dev branch into main
        run: |
          git checkout main
          git merge dev --no-ff -m "Merging dev into main"
          git push origin main
