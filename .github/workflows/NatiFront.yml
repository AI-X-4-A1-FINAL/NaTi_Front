name: Create PR and Deploy to Docker Hub

on:
  schedule:
    - cron: '30 4 * * *'  # 매일 오후 1시에 실행 (UTC 기준)
  workflow_dispatch: # 수동 트리거도 가능하도록 추가

jobs:
  create-pr-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write
      actions: write

    steps:
      # 1. 레포지토리 체크아웃
      - name: Check out the repository
        uses: actions/checkout@v2

      # 2. Node.js 환경 설정
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      # 3. jq 설치 (package.json 파싱용)
      - name: Install jq
        run: sudo apt-get install jq

      # 4. package.json에서 버전 및 릴리스 노트 추출
      - name: Get the version from package.json
        id: get_version
        run: |
          VERSION=$(cat package.json | jq -r .version)
          NOTES=$(cat package.json | jq -r .releaseNotes)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "NOTES=$NOTES" >> $GITHUB_ENV

      # 5. .env 파일 생성 (GitHub Secrets에서 환경 변수 가져오기)
      - name: Create .env file
        run: |
          echo "REACT_APP_LLM=${{ secrets.REACT_APP_LLM }}" >> .env
          echo "REACT_APP_TTS=${{ secrets.REACT_APP_TTS }}" >> .env

      # 6. PR 생성 (현재 브랜치에서 dev 브랜치로 자동 PR 생성)
      - name: Create Pull Request to dev branch
        id: create_pr
        run: |
          git config --global user.email "power4206@gmail.com"
          git config --global user.name "KHY90"
          
          # 현재 브랜치 이름을 가져옵니다 (예: feat/notice, feat/llm 등)
          CURRENT_BRANCH="${GITHUB_REF##*/}"
          
          # dev 브랜치로 PR 생성
          git checkout $CURRENT_BRANCH
          
          # 변경사항 커밋 (필요한 경우)
          git add .
          git commit -m "Automated PR for merging $CURRENT_BRANCH into dev"
          
          # 원격에 푸시
          git push origin $CURRENT_BRANCH
          
          # GitHub API를 사용해 PR 생성
          PR_URL=$(curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d '{"title":"Automated PR for merging '$CURRENT_BRANCH' into dev","head":"'$CURRENT_BRANCH'","base":"dev"}' \
            https://api.github.com/repos/${{ github.repository }}/pulls | jq -r .html_url)

          echo "PR URL: $PR_URL"
          echo "pr_url=$PR_URL" >> $GITHUB_ENV

      # 7. Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image to Docker Hub
        run: |
          echo "Building Docker image"
          docker-compose -f docker-compose.yml build
          
          echo "Pushing Docker image to Docker Hub"
          docker-compose -f docker-compose.yml push

      # 8. Docker Compose로 서비스 배포
      - name: Deploy with Docker Compose
        run: |
          echo "Deploying services with Docker Compose"
          docker-compose -f docker-compose.yml up -d

      # 9. PR 승인 (옵션, 자동으로 승인하려면 아래 사용)
      - name: Approve Pull Request (optional)
        if: success() && env.pr_url != ''
        run: |
          curl -s -X PATCH \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d '{"state": "approved"}' \
            https://api.github.com/repos/${{ github.repository }}/pulls/${{ env.pr_url }}.json

      # 10. PR 머지 (옵션, 자동으로 머지하려면 아래 사용)
      - name: Merge Pull Request (optional)
        if: success() && env.pr_url != ''
        run: |
          curl -s -X PUT \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d '{"merge_method": "merge"}' \
            https://api.github.com/repos/${{ github.repository }}/pulls/${{ env.pr_url }}/merge
